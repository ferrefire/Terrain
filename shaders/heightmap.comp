#version 460

#extension GL_ARB_shading_language_include : require

layout(set = 0, binding = 0) uniform Variables
{
	mat4 view;
	mat4 projection;
	vec4 viewPosition;
	vec4 lightDirection;
	vec4 resolution;
} variables;

layout(set = 1, binding = 0, r16f) uniform image2D target;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "noise.glsl"

void main()
{
	vec2 uv = vec2(float(gl_GlobalInvocationID.x) / 1024.0, float(gl_GlobalInvocationID.y) / 1024.0);
	//float value = noised(uv).x + 0.5;
	//float value = fbm2D_withDeriv(uv + 75, 5, 4.0, 0.2).x;

	vec2 ndc = vec2(uv.x * 2.0 - 1.0, uv.y * 2.0 - 1.0);
	vec4 clip = vec4(ndc, -1.0, 1.0);
	vec4 eye = inverse(variables.projection) * clip;
	eye = vec4(eye.xy, 1.0, 0.0);
	vec3 world = (inverse(variables.view) * eye).xyz;
	vec3 direction = normalize(world);

	vec3 ray = variables.viewPosition.xyz;
	float lastHit = 1.0;
	float dis = 0.01;
	const int maxIterations = 250;
	int iterations = 0;
	bool hit = false;
	while (!hit && iterations < maxIterations)
	{
		if (ray.y > 1.0 && direction.y > 0.0) iterations = maxIterations;
		ray += direction * dis;
		//lastHit = fbm2D_withDeriv(ray.xz, 5, 4.0, 0.2).x;
		lastHit = fbm(ray.xz, 5).x + 0.5;
		if (ray.y < lastHit) hit = true;
		dis *= 1.01;
		iterations++;
	}

	float value = 0.0;
	if (hit) value = (1.0 - float(iterations) / maxIterations) * lastHit;
	//float value = (hit ? 1.0 : 0.0);

	imageStore(target, ivec2(gl_GlobalInvocationID.xy), vec4(value, 0.0, 0.0, 0.0));
	//imageStore(target, ivec2(gl_GlobalInvocationID.xy), vec4(float(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y) / 2048.0, 0.0, 0.0, 0.0));
}